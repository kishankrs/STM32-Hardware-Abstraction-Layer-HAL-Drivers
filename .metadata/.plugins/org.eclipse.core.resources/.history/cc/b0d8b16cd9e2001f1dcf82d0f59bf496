#include "stm32f4xx_hal.h"

void uart_init(void);
UART_HandleTypeDef huart2;
char message[20] = "Hello from STM32\r\n";


int main()
{

	HAL_Init();
	void uart_init();


	while(1)
	{
		 HAL_UART_Transmit (UART_HandleTypeDef * huart, const uint8_t * pData, uint16_t Size, uint32_t Timeout);
	}
}



void SysTick_Handler (void)
{
	HAL_IncTick();
}

void uart_init(void)
{


	GPIO_InitTypeDef GPIO_InitStruct = {0};

	//Enable UART Pin clock access
	__HAL_RCC_GPIOD_CLK_ENABLE();

	//Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();

	//Configure pins to act as alternate function pin (UART)
	GPIO_InitStruct.Pin			= GPIO_PIN_5|GPIO_PIN_6;
	GPIO_InitStruct.Mode		= GPIO_MODE_AF_PP;
	GPIO_InitStruct.Alternate 	= GPIO_AF7_USART2;
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);

	//Configure UART module
	huart2.Instance 			= USART2;
	huart2.Init.BaudRate 		= 115200;
	huart2.Init.WordLength		= UART_WORDLENGTH_8B;
	huart2.Init.StopBits		= UART_STOPBITS_1;
	huart2.Init.Parity			= UART_PARITY_NONE;
	huart2.Init.Mode			= UART_MODE_TX;
	huart2.Init.HwFlowCtl		= UART_HWCONTROL_NONE;
	huart2.Init.OverSampling	= UART_OVERSAMPLING_16;

	HAL_UART_Init(&huart2);


}
